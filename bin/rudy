#!/usr/bin/ruby

# Rudy -- Your friend in staging and deploying to EC2
#
#   See rudy -h for usage
# 

#
# No Ruby 1.9.1 support. Only 1.8.x for now :[
unless RUBY_VERSION < "1.9"
  puts "Sorry! We're using the right_aws gem and it doesn't support Ruby 1.9 (md5 error)."
  exit 1
else
 require 'rubygems'
end

RUDY_HOME = File.join(File.dirname(__FILE__), '..')
RUDY_LIB = File.join(RUDY_HOME, 'lib')
$:.unshift RUDY_LIB # Put our local lib in first place

require 'drydock'
extend Drydock

project "Rudy"  # This also runs require 'ruby'

debug :on

#capture :stderr       

global :A, :accesskey, String, "AWS Access Key"
global :S, :secretkey, String, "AWS Secret Access Key"
#global :R, :region, String, "Connect to a specific EC2 region (ie: #{Rudy::DEFAULT_REGION})"
global :f, :config, String, "Specify another configuration file to read (ie: #{Rudy::RUDY_CONFIG_FILE})"
global :z, :zone, String, "Connect to a specific EC2 zone (ie: #{Rudy::DEFAULT_ZONE})"
global :e, :environment, String, "Connect to the specified environment (ie: #{Rudy::DEFAULT_ENVIRONMENT})"
global :r, :role, String, "Connect to a machine with the specified role (ie: #{Rudy::DEFAULT_ROLE})"
global :p, :position, String, "Position in the machine in its group (ie: #{Rudy::DEFAULT_POSITION})"
global :u, :user, String, "Provide a username (ie: #{Rudy::DEFAULT_USER})"
global :q, :quiet, "Run with less output"
global :v, :verbose, "Increase verbosity of output (i.e. -v or -vv or -vvv)" do
  @verbose ||= 0
  @verbose += 1
end
global :V, :version, "Display version number" do
  puts "Rudy version: #{Rudy::VERSION}"
  exit 0
end

#desc "Run this the first time you use Rudy (it's immutable so running it again does no harm)."
#command :setup => Rudy::Command::Metadata


# ------------------------------------  RUDY INFO COMMANDS  --------
# ------------------------------------------------------------------

#usage "rudy info"
#desc "Displays info about the current Rudy configuration"
#command :info => Rudy::Command::Metadata

usage "rudy [-f config-file] config [param-name]"
desc "Check Rudy configuration."
option :l, :all, "Display config settings for all machines"
option :d, :defaults, "Display the default value for the supplied parameter"
argv :name
command :config => Rudy::Command::Config

usage "rudy myaddress [-i] [-e]"
desc "Displays you current internal and external IP addresses"
option :e, :external, "Display only external IP address"
option :i, :internal, "Display only internal IP address"
command :myaddress do |obj|
  ea = Rudy::Utils::external_ip_address || '' 
  ia = Rudy::Utils::internal_ip_address || ''
  if obj.global.quiet
    puts ia unless obj.option.external && !obj.option.internal
    puts ea unless obj.option.internal && !obj.option.external
  else
    puts "%10s: %s" % ['Internal', ia] unless obj.option.external && !obj.option.internal
    puts "%10s: %s" % ['External', ea] unless obj.option.internal && !obj.option.external
  end
end



# -----------------------------  RUDY MAINTENANCE COMMANDS  --------
# ------------------------------------------------------------------

usage "#{$/} [global options] disks [-C -p path -d device -s size] [-A] [-D] [disk name]"
desc "Manage Disks"
option :l, :all, "Display all disk definitions"
option :p, :path, String, "The filesystem path to use as the mount point"
option :d, :device, String, "The device id (default: /dev/sdh)"
option :s, :size, Integer, "The size of disk (in GB)"
action :C, :create, "Create a disk definition"
action :D, :destroy, "Destroy a disk definition"
action :A, :attach, "Attach a disk"
action :N, :unattach, "Unattach a disk"
argv :diskname
command :disk => Rudy::Command::Disks


usage "rudy [global options] backups [-C] [disk name]"
desc "Manage Backups"
option :s, :snapshot, String, "Create a backup entry from an existing snapshot"
action :Z, :sync, "Check for and delete backup metadata with no snapshot. DOES NOT delete snapshots."
#action :T, :tidy, "Tidy existing backups"
action :D, :destroy, "Destroy a backup and DELETE its snapshots."
action :C, :create, "Create a backup"
argv :disk
command :'backup' => Rudy::Command::Backups
command_alias :backup, :bu


usage "rudy [global options] metadata instance-ID"
desc "Display Rudy metadata."
command :metadata => Rudy::Command::Metadata
command_alias :metadata, :md


#desc "Update a Machine Group with the current version of Rudy"
#command :update => Rudy::Command::Machines

usage "rudy [-e env] [-u user] connect [-p] [cmd]"
desc "Open an SSH connection"
option :p, :print, "Only print the SSH command, don't connect"
argv :cmd
command :connect => Rudy::Command::Environment 
command_alias :connect, :ssh

usage "rudy [-e env] [-u user] copy [-p] -r [from path] [to path]"
desc "Copy files to or from machines. NOTE: You must use quotes when using a tilda for your remote dir ('~/')."
option :r, :remote, "Copy FROM the remote machine to the local machine"
option :p, :print, "Only print the SSH command, don't connect"
argv :from, :to
command :copy => Rudy::Command::Environment
command_alias :copy, :scp
command_alias :copy, :upload
command_alias :copy, :download

desc "Machine Group Status"
command :status => Rudy::Command::Machines

# --------------------------------  RUDY ROUTINES COMMANDS  --------
# ------------------------------------------------------------------

desc "Shutdown a Machine Group"
command :shutdown => Rudy::Command::Machines

desc "Start a Machine Group"
command :startup => Rudy::Command::Machines
command_alias :startup, :start

desc "Restart a Machine Group"
command :restart => Rudy::Command::Machines

desc "Release to a machine group"
option :s, :switch, "Switch to the release branch/tag"
option :m, :msg, String, "A short release note"
command :release => Rudy::Command::Release

#desc "Update the release currently running machine group"
#command :rerelease => Rudy::Command::Release

#desc "Deploy disk snapshots from one machine to another"
#command :deploy => Rudy::Command::Deploy







__END__
RUDY v0.5                                   UTC: 2009-02-27 15:39:57

       [z:us-east-1b   e:stage   r:app   p:01]



