#!/usr/bin/ruby

# Rudy -- Your friend in staging and deploying to EC2
#
#   See rudy -h for usage
# 

RUDY_HOME = File.join(File.dirname(__FILE__), '..')
RUDY_LIB = File.join(RUDY_HOME, 'lib')
$:.unshift RUDY_LIB # Put our local lib in first place

require 'rubygems' if RUBY_VERSION < "1.9"
require 'date'
require 'drydock'
require 'rudy'
extend Drydock


global :A, :accesskey, String, "AWS Access Key"
global :S, :secretkey, String, "AWS Secret Access Key"
#global :R, :region, String, "Connect to a specific EC2 region (ie: #{Rudy::DEFAULT_REGION})"
global :f, :config, String, "Specify another configuration file to read (ie: #{Rudy::RUDY_CONFIG_FILE})"
global :z, :zone, String, "Connect to a specific EC2 zone (ie: #{Rudy::DEFAULT_ZONE})"
global :e, :environment, String, "Connect to the specified environment (ie: #{Rudy::DEFAULT_ENVIRONMENT})"
global :r, :role, String, "Connect to a machine with the specified role (ie: #{Rudy::DEFAULT_ROLE})"
global :p, :position, String, "Position in the machine in its group (ie: #{Rudy::DEFAULT_POSITION})"
global :u, :user, String, "Provide a username (ie: #{Rudy::DEFAULT_USER})"
global :q, :quiet, "Run with less output"
global :v, :verbose, "Increase verbosity of output (i.e. -v or -vv or -vvv)" do
  @verbose ||= 0
  @verbose += 1
end
global :V, :version, "Display version number" do
  puts "Rudy version: #{Rudy::VERSION}"
  exit 0
end

#desc "Run this the first time you use Rudy (it's immutable so running it again does no harm)."
#command :setup => Rudy::CLI::Metadata


# ------------------------------------  RUDY INFO COMMANDS  --------
# ------------------------------------------------------------------

#usage "rudy info"
#desc "Displays info about the current Rudy configuration"
#command :info => Rudy::CLI::Metadata

usage "rudy [-f config-file] config [param-name]"
desc "Check Rudy configuration."
option :l, :all, "Display configs for all machines"
option :d, :defaults, "Display the default value for the supplied parameter"
option :g, :group, String, "Display configuration for a specific group"
argv :name
command :config => Rudy::CLI::Config

usage "rudy myaddress [-i] [-e]"
desc "Displays you current internal and external IP addresses"
option :e, :external, "Display only external IP address"
option :i, :internal, "Display only internal IP address"
command :myaddress do |obj|
  ea = Rudy::Utils::external_ip_address || '' 
  ia = Rudy::Utils::internal_ip_address || ''
  if obj.global.quiet
    puts ia unless obj.option.external && !obj.option.internal
    puts ea unless obj.option.internal && !obj.option.external
  else
    puts "%10s: %s" % ['Internal', ia] unless obj.option.external && !obj.option.internal
    puts "%10s: %s" % ['External', ea] unless obj.option.internal && !obj.option.external
  end
end



# -----------------------------  RUDY MAINTENANCE COMMANDS  --------
# ------------------------------------------------------------------

#usage "#{$/} [global options] disks [-C -p path -d device -s size] [-A] [-D] [disk name]"
#desc "Manage Disks"
#option :l, :all, "Display all disk definitions"
#option :p, :path, String, "The filesystem path to use as the mount point"
#option :d, :device, String, "The device id (default: /dev/sdh)"
#option :s, :size, Integer, "The size of disk (in GB)"
#action :C, :create, "Create a disk definition"
#action :D, :destroy, "Destroy a disk definition"
#action :A, :attach, "Attach a disk"
#action :N, :unattach, "Unattach a disk"
#argv :diskname
#command :disk => Rudy::CLI::Disks


#usage "rudy [global options] backups [-C] [disk name]"
#desc "Manage Backups"
#option :s, :snapshot, String, "Create a backup entry from an existing snapshot"
#action :Z, :sync, "Check for and delete backup metadata with no snapshot. DOES NOT delete snapshots."
##action :T, :tidy, "Tidy existing backups"
#action :D, :destroy, "Destroy a backup and DELETE its snapshots."
#action :C, :create, "Create a backup"
#argv :disk
#command :'backup' => Rudy::CLI::Backups
#command_alias :backup, :bu


#usage "rudy [global options] groups [-C -R -A] [-a IP addresses] [-p ports] [group name]"
#desc "Manage EC2 Security Groups"
#option :all, "Display all security groups"
#option :r, :protocols, Array, "Comma-separated list of protocols. One of: tcp (default), udp, icmp"
#option :p, :ports, Array, "List of comma-separated port ranges in the form FROM:TO (default: 22,80,443)"
#option :a, :addresses, Array, "List of comma-separated IP addresses (default: #{Rudy::Utils::external_ip_address})"
#option :g, :group, String, "A group name to authorize or revoke permissions. Must also supply -o!"
#option :o, :owner, String, "A group owner ID (account number). Must also supply -g!"
#action :C, :create, "Create a security group"
#action :D, :destroy, "Destroy a security group"
#action :A, :authorize, "Authorize a permission for a security group"
#action :R, :revoke, "Revoke a permission for a security group"
#argv :name
#command :group => Rudy::CLI::Groups
#command_alias :group, :groups



#usage "rudy [global options] metadata instance-ID"
#desc "Display Rudy metadata."
#command :metadata => Rudy::CLI::Metadata
#command_alias :metadata, :md
#
#
#desc "Update a Machine Group with the current version of Rudy"
#option :g, :group, String, "A security group name"
#command :update => Rudy::CLI::Machines


option :e, :equation, "A math challenge"
option :h, :high, "High annoyance factor"
option :m, :medium, "Medium annoyance factor"
option :l, :low, "Low annoyance factor"
command :annoy do |obj|
  flavor = obj.option.equation ? :math : :string
  factor = :high if obj.option.high
  factor = :medium if obj.option.medium
  factor = :low if obj.option.low
  factor ||= :medium
  puts Annoy.are_you_sure?(factor, flavor)
end

usage "rudy [global options] connect [-g group-name] [-i instance-ID] [cmd]"
desc "Open an SSH connection"
option :print, "Only print the SSH command, don't connect"
option :g, :group, String, "A security group name"
option :i, :awsid, String, "An instance ID"
argv :cmd
command :connect => Rudy::CLI::Machines 
command_alias :connect, :ssh

usage "rudy [global options] copy [-p] [-r] source target"
desc "Copy files to or from machines. NOTE: You must use quotes when using a tilda for your remote dir ('~/')."
option :r, :recursive, "Recursively copy entire directories"
option :p, :preserve, "Preserve atimes and ctimes."
option :d, :download, "Download FROM the remote machine to the local machine"
option :print, "Only print the SSH command, don't connect"
option :g, :group, String, "A security group name"
option :i, :awsid, String, "An instance ID"
command :copy => Rudy::CLI::Machines
command_alias :copy, :scp
command_alias :copy, :upload
command_alias :copy, :download


# --------------------------------  RUDY ROUTINES COMMANDS  --------
# ------------------------------------------------------------------

desc "Machine Group Status"
usage "rudy [global options] status [-g group-name] [-s state] [-l] [instance-ID]"
option :g, :group, String, "A security group name"
option :s, :state, String, "Machine state. One of: running (default), pending, terminated"
option :l, :all, "Show all machines in this group, regardless of state."
argv :awsid
command :status => Rudy::CLI::Machines

desc "Shutdown a Machine Group"
usage "rudy [global options] shutdown [-g group-name] [instance-ID]"
option :g, :group, String, "A security group name"
argv :awsid
command :shutdown => Rudy::CLI::Machines

desc "Start a Machine Group"
usage "rudy [global options] startup [-g group-name] [-i image-ID]"
option :i, :image, String, "EC2 image ID (AMI)"
option :g, :group, String, "A security group name"
command :startup => Rudy::CLI::Machines
command_alias :startup, :start

#desc "Restart a Machine Group"
#option :g, :group, String, "A security group name"
#argv :awsid
#command :restart => Rudy::CLI::Machines
#
#desc "Release to a Machine Group"
#option :g, :group, String, "A security group name"
#option :s, :switch, "Switch to the release branch/tag"
#option :m, :msg, String, "A short release note"
#command :release => Rudy::CLI::Release

#desc "Update the release currently running in a machine group"
#command :rerelease => Rudy::CLI::Release
#command_alias :rerelease, :rere

#desc "Deploy disk snapshots from one machine to another"
#command :deploy => Rudy::CLI::Deploy




# -----------------------------------  AMAZON EC2 COMMANDS  --------
# ------------------------------------------------------------------

#usage "rudy [global options] addresses [-A address instance ID]"
#desc "Manage Amazon Elastic IP addresses"
#argv :address, :instanceid
#action :A, :associate, "Associate an address to a running instance"
#command :addresses => Rudy::CLI::Addresses
#command_alias :addresses, :address
#
#
#usage "rudy images [-C -i name [-b bucket -a account]] [-D AMI-ID]"
#desc "Manage EC2 Machine Images (AMIs)"
#option :a, :account, String, "Your Amazon Account Number"
#option :i, :image_name, String, "The name of the image"
#option :p, :print, "Print-only (don't execute commands)"
#option :b, :bucket_name, String, "The name of the bucket that will store the image"
#action :C, :create, "Create an image"
##action :P, :prepare, "Prepare a running instance to be used as an image"
#action :D, :destroy, "Deregister an image (currently _does not_ remove images files from S3)"
#argv :ami
#command :images => Rudy::CLI::Images
#command_alias :images, :image
#
#
#desc "Manage EC2 Volumes"
#action :D, :destroy, "Destroy a volume"
#argv :vol
#command :volumes => Rudy::CLI::Volumes
#command_alias :volumes, :volume


#usage "rudy [global options] instances [-D] [-S -i image ID] [instance ID OR group name]"
#desc "Manage EC2 Instances"
#option :all, "Display all instances"
#option :a, :address, String, "Amazon elastic IP"
#option :i, :image, String, "Amazon machine image ID (ami)"
##option :v, :volume, String, "Amazon volume ID"
#action :D, :destroy, "Destroy the given instance IDs. All data will be lost!"
##action :S, :start, "Start an instance"
##action :R, :restart, "Restart an instance"
#argv :filter
#command :instances => Rudy::CLI::Instances
#command_alias :instances, :instance




# -------------------------------------------  UGLY STUFFS  --------
# ------------------------------------------------------------------
debug :on
capture :stderr       
before do
  @start = Time.now
end
after do
  @elapsed = Time.now - @start
  puts $/, "Elapsed: %.2f seconds" % @elapsed.to_f if @elapsed > 0.1
end

