#!/usr/bin/ruby

# = Interactive Rudy (experimental)
# 
# === Not your granparent's deployment tool
#
#   See ird -h for usage
#

$:.unshift File.join(File.dirname(__FILE__), '..', 'lib') # Put our local lib in first place
$:.unshift File.join(File.dirname(__FILE__), '..', 'vendor', 'highline-1.5.1', 'lib')
%w{drydock caesars rye}.each { |dir| $:.unshift File.join(File.dirname(__FILE__), '..', '..', dir, 'lib') }
require 'rubygems'

# SEE: http://github.com/rubyspec/matzruby/blob/a34130eb7c4ecc164115a59aa1b76c643bd98202/lib/irb/xmp.rb
# SEE: http://github.com/blackwinter/wirble/tree/master
require "irb"
require 'irb/completion'

require 'drydock'
require 'rudy'
require 'rudy/cli'


module IRD
  include Rudy::Huxtable
  
  def config; @@config; end
  def global; @@global; end
  
  def m; Rudy::Machines; end
  def d; Rudy::Disks; end
  def b; Rudy::Backups; end
  
  def d; Rudy::Routines::Handlers::Disks; end
  def g; Rudy::Routines::Handlers::Group; end
  def k; Rudy::Routines::Handlers::Keypair; end
  
  def env(v)
    @@global.environment = v
    reconnect
  end
  
  def role(v)
    @@global.role = v
    reconnect
  end
  
  def reconnect
    Rudy::Metadata.connect @@global.accesskey, @@global.secretkey, @@global.region
    Rudy::AWS::EC2.connect @@global.accesskey, @@global.secretkey, @@global.region
    print_header
  end
  
  def print_header
    puts Rudy::CLI.generate_header(@@global, @@config)
  end
  
  def h;
    puts (%Q`
  HELP

    h             Help (this screen)
    m             Rudy::Machines
    d             Rudy::Routines::Handlers::Disks
    g             Rudy::Routines::Handlers::Group
    k             Rudy::Routines::Handlers::Keypairs
    ssh [GROUP]   Connect to a machine
    example       Start an EC2 instance from scratch.
    `)
  end
  def example
    puts (%Q`
  EXAMPLE
      Start an EC2 instance from scratch.

      # Create a security group
      >> g.create
      => #<Rudy::AWS::EC2::Group @name="stage-app" ...>

      # Create a keypair (used to login as root)
      >> k.create
      => #<Rudy::AWS::EC2::KeyPair @name="key-stage-app" ...>

      # Start an EC2 machine instance:    
      >> m.create
      Instance: i-228def51
      Waiting for the instance to startup
      ........It's up!

      # Login to the new instance
      >> ssh 

      All commands in Rudy refer to the global defaults unless
      otherwise specified. "stage" is the default environment and 
      "app" is the default role. You can change these with command 
      line arguments or by modifying the defaults in your Rudy 
      config file: #{Rudy::Huxtable.config_dirname}

      You can also specify your own names by providing
      one as the first argument: g.create 'group5000'.

      # List instances in stage-app
      >> m.list :running
      => [#<Rudy::AWS::EC2::Instance:0x18c5888 ...>]

      # Print the instance in a human readable way
      >> puts m.list.first.to_s

      # Print instance system console output
      >> puts m.console

      # Destroy ALL INSTANCES in stage-app
      >> m.destroy
    `)
  end
end

module IRD::DisksWrapper
  def self.method_missing(meth, *args, &block)
    
  end
end

class IRD::Command < Rudy::CLI::Base
  extend IRD
  
  default :ird
  
  
  command :ird do |obj|
    
    Rudy::Huxtable.update_global obj.global
    Rudy::Huxtable.update_config
    
    reconnect
    
    puts Rudy::Utils.without_indent(%Q`
    ------------------------------------------------------------
    Welcome Interactive Rudy! (EXPERIMENTAL)
    ------------------------------------------------------------

    `)
    h
  
    # What's the deal with this error message when defining a help method?
    # => rb: warn: can't alias help from irb_help
    if __FILE__ == $0
      IRB.start(__FILE__)
    else
      # check -e option
      if /^-e$/ =~ $0
        IRB.start(__FILE__)
      else
        IRB.start(__FILE__)
      end
    end
  
  end
  
end

extend IRD
Drydock.run!
