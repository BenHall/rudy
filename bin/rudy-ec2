#!/usr/bin/ruby

# Rudy -- Your friend in staging and deploying to EC2
#
#   See rudy -h for usage
# 

#
# No Ruby 1.9.1 support. Only 1.8.x for now :[
unless RUBY_VERSION < "1.9"
  puts "Sorry! We're using the right_aws gem and it doesn't support Ruby 1.9 (md5 error)."
  exit 1
else
 require 'rubygems'
end

RUDY_HOME = File.join(File.dirname(__FILE__), '..')
RUDY_LIB = File.join(RUDY_HOME, 'lib')
$:.unshift RUDY_LIB # Put our local lib in first place

require 'drydock'
extend Drydock

project "Rudy"  # This also runs require 'ruby'

debug :off

capture :stderr       

global :A, :accesskey, String, "AWS Access Key"
global :S, :secretkey, String, "AWS Secret Access Key"
global :R, :region, String, "Connect to a specific EC2 region (default: #{Rudy::DEFAULT_REGION})"
global :z, :zone, String, "Connect to a specific EC2 zone (default: #{Rudy::DEFAULT_ZONE})"
global :q, :quiet, "Run with less output"
global :v, :verbose, "Increase verbosity of output (i.e. -v or -vv or -vvv)" do
  @verbose ||= 0
  @verbose += 1
end
global :V, :version, "Display version number" do
  puts "Rudy version: #{Rudy::VERSION}"
  exit 0
end





# -----------------------------------  AMAZON EC2 COMMANDS  --------
# ------------------------------------------------------------------

usage "rudy [global options] addresses [-A address instance ID]"
desc "Manage Amazon Elastic IP addresses"
argv :address, :instanceid
action :A, :associate, "Associate an address to a running instance"
command :addresses => Rudy::Command::Addresses
command_alias :addresses, :address


usage "rudy images [-C -i name [-b bucket -a account]] [-D AMI-ID]"
desc "Manage EC2 Machine Images (AMIs)"
option :a, :account, String, "Your Amazon Account Number"
option :i, :image_name, String, "The name of the image"
option :b, :bucket_name, String, "The name of the bucket that will store the image"
action :C, :create, "Create an image"
#action :P, :prepare, "Prepare a running instance to be used as an image"
action :D, :destroy, "Deregister an image (currently _does not_ remove images files from S3)"
argv :ami
command :images => Rudy::Command::Images
command_alias :images, :image


desc "Manage EC2 Volumes"
action :D, :destroy, "Destroy a volume"
argv :vol
command :volumes => Rudy::Command::Volumes
command_alias :volumes, :volume


usage "rudy [global options] instances [-D] [-S -i image ID] [instance ID OR group name]"
desc "Manage EC2 Instances"
option :all, "Display all instances"
option :a, :address, String, "Amazon elastic IP"
option :i, :image, String, "Amazon machine image ID (ami)"
#option :v, :volume, String, "Amazon volume ID"
action :D, :destroy, "Destroy the given instance IDs. All data will be lost!"
#action :S, :start, "Start an instance"
#action :R, :restart, "Restart an instance"
argv :filter
command :instances => Rudy::Command::Instances
command_alias :instances, :instance


usage "rudy [global options] groups [-C] [-a IP addresses] [-p ports] [group name]"
desc "Manage EC2 Security Groups"
option :all, "Display all security groups"
option :r, :protocols, Array, "Comma-separated list of protocols. One of: tcp (default), udp, icmp"
option :p, :ports, Array, "List of comma-separated ports to authorize (default: 22,80,443)"
option :a, :addresses, Array, "List of comma-separated IP addresses to authorize (default: your external IP)"
action :C, :create, "Create a security group"
action :D, :destroy, "Destroy a security group"
action :M, :modify, "Modify a security group"
argv :group
command :groups => Rudy::Command::Groups
command_alias :groups, :group



